---
title: "Weather"
format: html
editor: visual
---

```{r}
library(ggplot2)
library(tidyverse)
library(stringr)
library(sf)
library(leaflet)
library(viridis)
library(mgcv)
library(terra)
library(raster)
library(rnaturalearth)
library(INLA)
library(lubridate)
```

```{r}
safe_sum <- function(x) {
  if (all(is.na(x))) {
    return(NA_real_)
  } else {
    return(sum(x, na.rm = TRUE))
  }
}
```

```{r}
data_monthly = read_csv("Weather Data/weather_data_complete.csv")
data_daily = read_csv("Weather Data/weather_data_daily_complete.csv")
temperature_data = read_csv("Weather Data/temperature_data.csv")

data_daily$date = dmy(data_daily$date)
data_daily$day = day(data_daily$date)
data_daily$month = month(data_daily$date)
data_daily$year = year(data_daily$date)

data_daily_filtered = data_daily |>
  filter(year > 2000) |>
  dplyr::select(-date, -ind...2)

data_daily_filtered = data_daily_filtered |>
  group_by(year, AreaOfResidence) |>
  summarise(
    "Precipitation Amount" = safe_sum(rain),
    "Maximum Temperature" = round(mean(maxt, na.rm = TRUE),3),
    "Minimum Temperature" = round(mean(mint, na.rm = TRUE),3),
    "Latitude" = first(Latitude),
    "Longitude" = first(Longitude),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = -c(year, AreaOfResidence, Latitude, Longitude),
    names_to = "parameter",
    values_to = "value"
  ) |>
  filter(!is.na(value) & !is.infinite(value))

data_daily_filtered
```

```{r}
final_temperature_data = temperature_data |>
  group_by(year, NAME) |>
  summarise(
    "Mean Temperature" = round(mean(`Mean Temperature`, na.rm = TRUE),3),
    "Latitude" = first(Latitude),
    "Longitude" = first(Longitude),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = -c(year, NAME, Latitude, Longitude),
    names_to = "parameter",
    values_to = "value"
  ) |>
  filter(!is.na(value)) |>
  rename(AreaOfResidence = NAME)

final_temperature_data
```

```{r}
data_filtered <- data_monthly |>
  filter(year > 2000) |>
  group_by(year, AreaOfResidence) |>
  summarise(
    `Greatest Daily Fall` = if (all(is.na(gdf))) NA_real_ else max(gdf, na.rm = TRUE),
    `Number of Rain Days` = safe_sum(rd),
    `Number of Wet Days` = safe_sum(wd),
    Latitude = first(Latitude),
    Longitude = first(Longitude),
    .groups = "drop"
  ) |>
  pivot_longer(
    cols = -c(year, AreaOfResidence, Latitude, Longitude),
    names_to = "parameter",
    values_to = "value"
  ) |>
  filter(!is.na(value) & !is.infinite(value))

data_filtered

final = rbind(data_filtered, data_daily_filtered, final_temperature_data)
final = final |> arrange(year, AreaOfResidence)
final
write_csv(final, "./Weather Data/weather_data_long_clean.csv")
```

```{r}
dsf <- st_as_sf(data_filtered, coords = c("Longitude", "Latitude"))
st_crs(dsf) <- 4326

dsf = dsf |>
  filter(year == 2006)

dsf = dsf |>
  filter(parameter == "Number of rain days")

dsf
```

```{r}
pal <- colorNumeric(palette = "viridis", domain = dsf$value)
leaflet(dsf) %>% addTiles() %>%
  addCircles(lng = st_coordinates(dsf)[, 1],
             lat = st_coordinates(dsf)[, 2],
             radius = ~sqrt(value)*100,
             color = ~pal(value), popup = ~AreaOfResidence) %>%
  addLegend(pal = pal, values = ~value, position = "bottomright")
```

FDAPDE:

```{r}
years = unique(data_filtered$year)
params = unique(data_filtered$parameter)

if(!dir.exists("models")) dir.create("models")
if(!dir.exists("models/fdapde")) dir.create("models/fdapde")

ireland = st_read("Counties/shapefiles/ireland_boundary.shp")

grid_low_res <- expand.grid(Longitude = seq(-11, -6, len = 30), Latitude = seq(51, 56, len = 30))
grid_low_res_sf <- grid_sf <- st_as_sf(grid_low_res, coords = c("Longitude", "Latitude"), crs = 4326)
grid_low_res_filtered <- grid_low_res_sf[st_within(grid_low_res_sf, map, sparse = FALSE), ]
grid_low_res_filtered_df <- grid_low_res_filtered |>
  sf::st_coordinates() |>
  as.data.frame() |>
  setNames(c("Longitude", "Latitude"))

#prediction grid. 200 x 200 points. filtered out points which lie outside the map.
grid <- terra::rast(map, nrows = 200, ncols = 200)
xy <- terra::xyFromCell(grid, 1:ncell(grid))
dp <- st_as_sf(as.data.frame(xy), coords = c("x", "y"),
               crs = st_crs(map))
indicespointswithin <- which(st_intersects(dp, map,
                                           sparse = FALSE))
dp <- st_filter(dp, map)
pred_coords = st_coordinates(dp) #predict for these points. around 20000 data points which lie inside the map.

#for (yr in years) {
#  for (param in params) {
    fdapde_data = data_filtered |>
      filter(parameter == "Number of rain days" & year == 2006)
    
    fdapde_variates = fdapde_data |>
      dplyr::select(Longitude, Latitude) |>
      as.matrix()
    
    fdapde_response = fdapde_data$value
    
    tri_mesh <- fdaPDE::create.mesh.2D(nodes = grid_low_res_filtered_df, order = 1)
    plot(tri_mesh)
    FEM_basis <- fdaPDE::create.FEM.basis(tri_mesh)
    
    plot(tri_mesh, main = "Mesh with Observation Points")
    points(fdapde_variates, col = "red", pch = 20)
    
    FEM_fit <- fdaPDE::smooth.FEM(fdapde_variates, 
                                  fdapde_response, 
                                  FEM_basis, lambda = 10^(-6:6),
                                  DOF.evaluation = 'exact', 
                                  lambda.selection.lossfunction = 'GCV')
    
    FEM_zfit <- fdaPDE::eval.FEM(FEM_fit$fit.FEM, pred_coords)
    
    output = cbind(pred_coords, FEM_zfit)
    
    r <- rast(output, type="xyz")
    crs(r) <- "EPSG:4326"
#    saveRDS(r, paste0("models/fdapde/", param, "_", yr, "_rastor.rds"))
#  }
#}

print("done!")
```

```{r}
rb <- raster::brick(r)
        contours <- rasterToContour(rb, levels = pretty(range(values(rb), na.rm = TRUE), n = 10))
        contours_sf <- st_as_sf(contours)
        
        pal <- colorNumeric("viridis", values(r),
                            na.color = "transparent")
        leaflet() %>% addTiles() %>%
          addRasterImage(rb, colors = pal, opacity = 0.8) %>%
          addPolylines(data = contours_sf, color = "black", weight = 1, opacity = 0.7) %>%
          addLegend(pal = pal, values = values(r), title = "input$parameter")
```
